package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"
	"github.com/joho/godotenv"
{{- if .UseMongo}}
	"go.mongodb.org/mongo-driver/mongo"
{{- end}}

{{- if .HasResources}}
	// Import generated packages
{{- range .Resources}}
{{- if .HasRepository}}
	{{.VarName}}Repository "{{$.ImportPath}}/internal/adapters/mongo/{{.VarName}}"
{{- end}}
{{- if .HasService}}
	{{.VarName}}Service "{{$.ImportPath}}/internal/services/{{.VarName}}"
{{- end}}
{{- end}}
{{- end}}
)

const (
	defaultPort     = "{{.DefaultPort}}"
	shutdownTimeout = {{.ShutdownTimeout}} * time.Second
)

func main() {
	// Load .env file
	if err := godotenv.Load(); err != nil {
		log.Printf("Warning: Could not load .env file: %v", err)
	}

	// Setup database connections (implemented in database.go)
{{- $hasHandlers := false}}
{{- range .Resources}}
	{{- if .HasHandler}}
		{{- $hasHandlers = true}}
	{{- end}}
{{- end}}
{{- if or .UseMongo $hasHandlers}}
	db, err := setupDatabase()
{{- else}}
	_, err := setupDatabase()
{{- end}}
	if err != nil {
		log.Fatalf("Failed to setup database: %v", err)
	}
{{- if .UseMongo}}
	defer func() {
		if db.MongoDB != nil {
			if err := closeMongoDB(db.MongoDB); err != nil {
				log.Printf("Error closing database connections: %v", err)
			}
		}
	}()
{{- end}}

	// Setup Chi router with middleware
	r := setupRouter()

	// Setup handlers and register routes
{{- if $hasHandlers}}
	handlers := setupHandlers(db)
	registerRoutes(r, handlers)
{{- else}}
	registerRoutes(r)
{{- end}}

	// Determine port
	port := os.Getenv("PORT")
	if port == "" {
		port = defaultPort
	}
	addr := fmt.Sprintf(":%s", port)

	// Create server
	srv := &http.Server{
		Addr:    addr,
		Handler: r,
	}

	// Start server in a goroutine
	go func() {
		log.Printf("Server starting on %s", addr)
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Server error: %v", err)
		}
	}()

	// Wait for interrupt signal
	gracefulShutdown(srv)
}



func setupRouter() *chi.Mux {
	r := chi.NewRouter()

	// Add standard middleware
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.RealIP)
	r.Use(middleware.RequestID)
	r.Use(middleware.Timeout(60 * time.Second))

	// Setup CORS
	r.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: true,
		MaxAge:           300, // Maximum value not ignored by any of major browsers
	}))

	return r
}

func gracefulShutdown(srv *http.Server) {
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt)
	<-c

	log.Println("Shutting down server...")
	ctx, cancel := context.WithTimeout(context.Background(), shutdownTimeout)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		log.Fatalf("Server forced to shutdown: %v", err)
	}

	log.Println("Server gracefully stopped")
}

{{- $hasHandlers := false}}{{- range .Resources}}{{- if .HasHandler}}{{- $hasHandlers = true}}{{- end}}{{- end}}
{{- if $hasHandlers}}
// setupHandlers creates all services for dependency injection  
func setupHandlers(db *DatabaseConnections) *Handlers {
{{- if .UseMongo}}
	// Get database name from environment
	dbName := os.Getenv("DB_NAME")
	if dbName == "" {
		dbName = "{{.DBName}}" // Default if not set
	}
{{- end}}

	handlers := &Handlers{}

{{- range .Resources}}
{{- if and .HasService .HasHandler}}
	// Setup {{.Name}} service for dependency injection
{{- if .HasRepository}}
	{{.VarName}}Repo := {{.VarName}}Repository.New{{.Name}}Repository(db.MongoDB.Database(dbName))
	{{.VarName}}Svc := {{.VarName}}Service.New{{.Name}}Service({{.VarName}}Repo)
{{- else}}
	{{.VarName}}Svc := {{.VarName}}Service.New{{.Name}}Service(nil) // No repository
{{- end}}
	
	handlers.{{.Name}}Service = {{.VarName}}Svc
{{- end}}
{{- end}}

	return handlers
}
{{- end}} 