// Package logger provides structured logging configuration using zapctxd
package logger

import (
	"{{.ImportPath}}/internal/pkg/config"
	"github.com/bool64/ctxd"
	"github.com/bool64/zapctxd"
	"go.uber.org/zap/zapcore"
)

// New creates and returns a logger with production settings
func New() ctxd.Logger {
	return NewWithConfig(false, zapcore.InfoLevel)
}

// NewDevelopment creates and returns a logger with development settings
func NewDevelopment() ctxd.Logger {
	return NewWithConfig(true, zapcore.DebugLevel)
}

// NewWithConfig creates and returns a logger with custom settings
func NewWithConfig(development bool, level zapcore.Level) ctxd.Logger {
	config := zapctxd.Config{
		Level:   level,
		DevMode: development,
	}

	return zapctxd.New(config)
}

// NewFromConfig creates and returns a logger from application config
func NewFromConfig(cfg *config.Config) ctxd.Logger {
	zapConfig := zapctxd.Config{
		Level:   cfg.GetLogLevel(),
		DevMode: cfg.Logging.Development,
	}

	return zapctxd.New(zapConfig)
}

// NewFromEnv creates and returns a logger based on application configuration
// This is a convenience function that loads config and creates logger
func NewFromEnv() (ctxd.Logger, error) {
	cfg, err := config.Load()
	if err != nil {
		return nil, err
	}

	return NewFromConfig(cfg), nil
} 