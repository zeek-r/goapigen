openapi: 3.0.0
info:
  title: Petstore API
  version: 1.0.0
  description: A simple petstore API example

components:
  schemas:
    Pet:
      type: object
      required:
        - name
        - status
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the pet
        name:
          type: string
          description: Name of the pet
          minLength: 1
          maxLength: 100
        species:
          type: string
          description: Species of the pet
        age:
          type: integer
          format: int32
          description: Age of the pet in years
        status:
          type: string
          description: Status of the pet
          enum: [available, pending, sold]
        created_at:
          type: string
          format: date-time
          description: When the pet was added to the system
        updated_at:
          type: string
          format: date-time
          description: When the pet was last updated

    Order:
      type: object
      required:
        - pet_id
        - quantity
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the order
        pet_id:
          type: string
          format: uuid
          description: ID of the pet being ordered
        quantity:
          type: integer
          format: int32
          description: Number of pets ordered
          minimum: 1
        status:
          type: string
          description: Order status
          enum: [placed, approved, delivered]
        created_at:
          type: string
          format: date-time
          description: When the order was placed
        updated_at:
          type: string
          format: date-time
          description: When the order was last updated

paths:
  /pets:
    get:
      operationId: listPets
      tags: [Pet]
      summary: List all pets
      description: Returns a list of all pets in the system
      responses:
        '200':
          description: A list of pets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
    post:
      operationId: createPet
      tags: [Pet]
      summary: Create a new pet
      description: Add a new pet to the store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '201':
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'

  /pets/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the pet to work with
        schema:
          type: string
          format: uuid
    get:
      operationId: getPet
      tags: [Pet]
      summary: Get a pet by ID
      description: Returns a pet based on its ID
      responses:
        '200':
          description: Pet found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
    put:
      operationId: updatePet
      tags: [Pet]
      summary: Update an existing pet
      description: Update the details of an existing pet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
    delete:
      operationId: deletePet
      tags: [Pet]
      summary: Delete a pet
      description: Remove a pet from the system
      responses:
        '204':
          description: Pet deleted successfully
        '404':
          description: Pet not found

  /orders:
    get:
      operationId: listOrders
      tags: [Order]
      summary: List all orders
      description: Returns a list of all orders in the system
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      operationId: createOrder
      tags: [Order]
      summary: Create a new order
      description: Place a new order for pets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the order to work with
        schema:
          type: string
          format: uuid
    get:
      operationId: getOrder
      tags: [Order]
      summary: Get an order by ID
      description: Returns an order based on its ID
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    delete:
      operationId: deleteOrder
      tags: [Order]
      summary: Delete an order
      description: Cancel and remove an order from the system
      responses:
        '204':
          description: Order deleted successfully
        '404':
          description: Order not found